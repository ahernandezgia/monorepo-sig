events { }

http {
  client_max_body_size 500M;

  server {
    listen 80;
    server_name sigh.doiyu.mx;
    return 301 https://$server_name$request_uri;
  }

  server {
    listen *:443 ssl;
    server_name sigh.doiyu.mx;
    ssl_certificate /etc/nginx/certs/doiyu.crt;
    ssl_certificate_key /etc/nginx/certs/doiyu.key;
    location / {
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-Ssl on;
      proxy_set_header Host $host;


      proxy_pass https://sig.front:443;
    }
  }

  server {
    listen 80;
    server_name apih.doiyu.mx;
    return 301 https://$server_name$request_uri;
  }

  server {
    listen *:443 ssl;
    server_name apih.doiyu.mx;
    ssl_certificate /etc/nginx/certs/doiyu.crt;
    ssl_certificate_key /etc/nginx/certs/doiyu.key;
    location / {
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-Ssl on;
      proxy_set_header Host $host;
      proxy_pass http://gateway:80;
    }
  }

  server {
    listen 80;
    server_name s3.doiyu.mx;
    return 301 https://$server_name$request_uri;
  }

  server {
      listen *:443 ssl;
      server_name s3.doiyu.mx;
      ssl_certificate /etc/nginx/certs/doiyu.crt;
      ssl_certificate_key /etc/nginx/certs/doiyu.key;
      location / {
          proxy_pass http://minio:9000;

          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_set_header Host $http_host;

          proxy_connect_timeout 300;

          # To support websocket
          # Default is HTTP/1, keepalive is only enabled in HTTP/1.1
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
          chunked_transfer_encoding off;
      }
      location /minio/ui/ {
          rewrite ^/minio/ui/(.*)$ /$1 break;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header Host $http_host;
          proxy_redirect off;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_set_header X-NginX-Proxy true;

          # This is necessary to pass the correct IP to be hashed
          real_ip_header X-Real-IP;

          # To support websocket
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";

          chunked_transfer_encoding off;
          proxy_pass http://minio:9001; # This uses the upstream directive definition to load balance

          # This one rewrite with sub_filter plugin
          sub_filter '<base href="/"/>' '<base href="/minio/ui/"/>';

      }
  }



  # server {
  #   listen 80;
  #   server_name s3.doiyu.mx;
  #   return 301 https://$server_name$request_uri;
  # }

  # server {
  #     listen *:443 ssl;
  #     server_name s3.doiyu.mx;
  #     ssl_certificate /etc/nginx/certs/doiyu.crt;
  #     ssl_certificate_key /etc/nginx/certs/doiyu.key;
  #     location / {
  #         proxy_pass http://minio:9001;
  #         proxy_set_header Host $host;
  #         proxy_set_header X-Real-IP $remote_addr;
  #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  #         proxy_set_header X-Forwarded-Proto $scheme;
  #     }
  # }

  # server {
  #   listen 80;
  #   server_name storage.doiyu.mx;
  #   return 301 https://$server_name$request_uri;
  # }

  # server {
  #     listen *:443 ssl;
  #     server_name storage.doiyu.mx;
  #     ssl_certificate /etc/nginx/certs/doiyu.crt;
  #     ssl_certificate_key /etc/nginx/certs/doiyu.key;
  #     location / {
  #         proxy_pass http://minio:9000;
  #         proxy_set_header Host $host;
  #         proxy_set_header X-Real-IP $remote_addr;
  #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  #         proxy_set_header X-Forwarded-Proto $scheme;
  #     }
  # }  
}